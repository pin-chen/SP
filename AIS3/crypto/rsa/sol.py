import gmpy2
import random
import functools
from Crypto.Util.number import long_to_bytes

e=3

n1=11490463658574484198272741638117740841026760831275330166027699544345823013983310418251159242033967790582541530665438349146278376436761380200314244264879418345846562245157007831369852766876874850073886496717529557250278043036283500363227071405770539882851356638890336729090370844108186515444813600637978232081032727322324765392278669375247075636276776013350816078017749663211615377413871786463735001667708738378684305730135152567132119734334000900890278921161071867042547710881731422289780896591456683899298631412600541119214210362874679878644476560440397320421557253168456524868032944559579824054140703402407827400771
FLAG1=9374981100745385289380239217504412294078012339718355431728028086007210636218350458127882004544617276115279034096808329944787273370286920975432230558133090470222368805498514012698656604831148321795195779919391280383900409607568640770295852520268803496971542698132197963904382754379009599797926896405567108586763194208122076172623801577242775593597515988822474381518632798537261234518450731677363638152252492223330402690350838606356154515065767313950293248693021106358919825876767508629270489909970574156853832020552979427827474247462001026894867345360260762696207622304317283480931026000094918480280570376060313493538

n2=9144302298086542213240898174984097447097668100175750935616760412990458083159955897017782450556688148157946685741864377409093103308617984252812052199786226931412722685707310394155366800152741664867302618602055634756317682075362902280579205413587868570137536990089753662988662527332008558216227367188597392591341849065949187136211170433753753599672726155801188215388088591257420684562077223557207057266163311124516703300563000791995372227049704692389716182033760611781633178344571039554583007241649418488944970375561857542320563357337537419259362206426257688673118377698145225170665997865517403550667183512559363653231
FLAG2=8540036145651653991931296564637225831522099554357978735230938323753511092881399138436253367397924198165492256107626032156861778074191717604550721904902024276128757913758218013900320217151711037608635775550808957121530514505411791437746583290309796540749313766715790257929811490697206471165051314152438437776824657067415459755056968509728401012665568871156124353272226265028919141873774187586512492550591222688007186415285206042795303168241888772776365958294066102260391854435996390635375582642864237243950148087188395381223201192934073330678751707635647123868702534129673505316808629847555425226781841818095627985486

n3=10646257583539968727588299265960401333924510219468766116851300477260356642751257627200265345664025184995625201851677160986329892514613176627882092847012119559960539735080316526783998015063690988103668081452845541736220406561786420684713620126011194038432164451718143992811938601380159936104625382978075061095616955350769835091967843130847936966003085286505794080723744929716736786660676832783354456922681640422655014832892198014770890036812920459994783196160639933240757577917973382568452111827478658127499781992630264293781592797313789855918090278793656641764542050306505177005063426514805038669145500860179958635267
FLAG3=10292756952078614373128065486455466224425452315060241776282017321485780463912358382049347025651879280146455186395129527073169412230326414393669021245688256584573976781460810797819090846968466831550112093865916375707046535570218699821035130214166005871881827853731802606865900968533701810447238941294847684517814128465821867978834387344776278597901968831844941499820945613463031524743890093238817072337745692053572487023264511062263964596003572980802292519921601924040862121400741499422266693094086568710548110126648669042027593348429313990209228205112041894933812947061152229396714270352069511543822553420785785534630

def CRT(mi, ai):
    # mi,ai分别表示模数和取模后的值,都为列表结构
    # Chinese Remainder Theorem
    # lcm=lambda x , y:x*y/gcd(x,y)
    # mul=lambda x , y:x*y
    # assert(reduce(mul,mi)==reduce(lcm,mi))
    # 以上可用于保证mi两两互质
    assert (isinstance(mi, list) and isinstance(ai, list))
    M = functools.reduce(lambda x, y: x * y, mi)
    ai_ti_Mi = [a * (M // m) * gmpy2.invert(M // m, m) for (m, a) in zip(mi, ai)]
    return functools.reduce(lambda x, y: x + y, ai_ti_Mi) % M

m_decrypt = gmpy2.iroot(CRT([n1, n2, n3], [FLAG1, FLAG2, FLAG3]), e)[0]
print(long_to_bytes(m_decrypt))

#ref: https://github.com/lossme/CTF/blob/master/challenge/RSA/%E5%B9%BF%E6%92%AD%E6%94%BB%E5%87%BB%20%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84n%EF%BC%88e%E7%9B%B8%E5%90%8C%EF%BC%89%E5%88%86%E5%88%AB%E5%AF%B9%E4%B8%80%E4%B8%AA%E6%98%8E%E6%96%87%E5%8A%A0%E5%AF%86/solve.py