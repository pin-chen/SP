from sage.all import *
from Crypto.Util.number import getPrime, bytes_to_long, long_to_bytes
def powmod(a, b, c):
    r = 1
    while b > 0:
        if b & 1:
            r = r * a % c
        a = a * a % c
        b >>= 1
    return r

def pow2(a, b):
    r = 1
    while b > 0:
        if b & 1:
            r = r * a 
        a = a * a 
        b >>= 1
    return r

def keygen(b):
    p = getPrime(b // 2)
    q = getPrime(b // 2)
    n = p * q
    e = 65537
    d = pow(e, -1, (p - 1) * (q - 1))
    return n, e, d

d = 17696675600483242877660414445019881835856527993364708240982147231442495586446557146510982842889218238766314421117899124150312392502786991130680929371016619727704480011458057567330492572375722734242179663393924105321195950108338142382490285649186730047580616569229128333197157790011100830426985480608283096135100546324086765825117372440279808709093843161708941536646158260910387168663791604109032318526245120290862246221161006961351222010282644109361926646789148017617120647742508814632869616670436692640937441011877605667301424690585572970027929915556237730264868601176844068401380999090468989008446417195146053944173
e = 65537

ed = 20252248370108973518699993512792232399479296480828750535204282605267358445200165203931896024044921661080311771528793050861254002037399653916957063275145674334001641547884078032668842956659205186759569951119973975489427960737744103603217155336350532037647440574268194254143391412807975066225465853130415867935567925486002146316739781466712795822464584541185007032191200454385129303849554606882368822963396326138326249563447164760202085728045018644529160054110141176948255664602689366621456670303204107943348164192243161953428763517419061460565927084706638577632764934299706485593834861329967179700413900150108330051025
de = 17093858831488578075644664298637925284820734723522584783206030117581374284642957408140708322103056363481424849166826103999658675332582248967906923051022829410840841224682894389124012778054476832013150223194623430080507292844817326976442947896019126386979710627861439966649455132787069607237692933176096844458691545623792199544945524885465426613711880421872046136676222342983533636035127384561899605983670271969083351790069685717008154627718375648559187687007692769563386903705269789825924831184912335660919371121867895820787230788838378829895125514001502654716012865996580982671368420644523058456784925757945722220531

c = 473434744919434068157397401558817114717073403143784253207149009991766508248651188555574560847010967289774137608922852097741882008928315488017107681024762015874009306930712998295810805825870297385513304354626562779327524383651610558497903974282111530140947512900797016084492215602560708133317892420148160777306540374411453871119714743483346307768324736993404420554284657618911747402027019005726133881920630513792206912098425690318664416532078542520057649876806957109222980267282397473865918277967250479470918711727431928817887286884175217488792817027554896273281327464806400296548864983044923844369576833275878262989

print("Hi")


de_not_mod = pow(d, e) - de

ed_e_not_mod = pow(ed, e) - e

N = gcd(de_not_mod, ed_e_not_mod)

print("N", N)

m = pow(c, d, N)

print(m)

print(long_to_bytes(int(m)))

exit()


#bigger_N, _, _ = keygen(4096)

#ed_not_mod = powmod(e, d, bigger_N)
#de_not_mod = powmod(d, e, bigger_N)

ed_not_mod = pow2(e, d)
de_not_mod = pow2(d, e)

print("ed_not_mod = ", ed_not_mod)
print("de_not_mod = ", de_not_mod)

N_1 = ed_not_mod - ed
N_2 = de_not_mod - de 

print("N_1 = ", N_1)
print("N_2 = ", N_2)

N = gcd(N_1, N_2)

print("N = ", N)

exit()
N = gcd(N_1, N_2)



if N == 1:
    print("N = ",N_1 * N_2)
else:
    print("N = ", N)

N = N_1 * N_2
m = powmod(c, d, N)

print("m = ", m)

print(long_to_bytes(m))


m = powmod(c, d, N_1)

print("m = ", m)

print(long_to_bytes(m))

m = powmod(c, d, N_2)

print("m = ", m)

print(long_to_bytes(m))